import { STRProfile } from '@/utils/constants';
import Papa from 'papaparse';

interface CSVRow {
  'Kit Number'?: string;
  'Name'?: string;
  'Country'?: string;
  'Haplogroup'?: string;
  [key: string]: string | undefined;
}

// üîÑ –£–ü–†–û–©–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ - —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ø–∞–º—è—Ç–∏
export async function processLargeFile(
  file: File,
  onProgress: (progress: number) => void
): Promise<STRProfile[]> {
  try {
    console.log(`üîÑ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ ${file.name} (${(file.size / 1024 / 1024).toFixed(1)} MB)`);
    
    const text = await file.text();
    console.log(`üîÑ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä: ${text.length} –±–∞–π—Ç`);

    const profiles: STRProfile[] = [];
    const processedKits = new Set<string>();

    return new Promise((resolve, reject) => {
      Papa.parse(text, {
        header: true,
        skipEmptyLines: true,
        chunk: (results: Papa.ParseResult<CSVRow>) => {
          if (!results.data || !Array.isArray(results.data)) {
            return;
          }

          results.data.forEach((row: any) => {
            const kitNumber = row['Kit Number'];
            if (!kitNumber || processedKits.has(kitNumber)) {
              return;
            }

            processedKits.add(kitNumber);
            
            const profile: STRProfile = {
              kitNumber,
              name: row['Name'] || '',
              country: row['Country'] || '',
              haplogroup: row['Haplogroup'] || '',
              markers: {}
            };

            // –ö–æ–ø–∏—Ä—É–µ–º –º–∞—Ä–∫–µ—Ä—ã
            Object.entries(row).forEach(([key, value]) => {
              if (key !== 'Kit Number' && 
                  key !== 'Name' && 
                  key !== 'Country' && 
                  key !== 'Haplogroup' && 
                  value) {
                profile.markers[key] = String(value).trim();
              }
            });

            if (Object.keys(profile.markers).length > 0) {
              profiles.push(profile);
            }
          });

          // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
          if (onProgress) {
            const estimatedTotal = Math.max(profiles.length * 2, 1000); // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
            const progress = Math.min((profiles.length / estimatedTotal) * 100, 95);
            onProgress(progress);
          }
        },
        complete: () => {
          try {
            console.log(`‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ ${profiles.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π`);
            onProgress(100);
            
            if (profiles.length > 0) {
              resolve(profiles);
            } else {
              reject(new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ —Ñ–∞–π–ª–µ'));
            }
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
            reject(error);
          }
        },
        error: (error: Error) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV:', error);
          reject(error);
        }
      });
    });

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:', error);
    throw error;
  }
}

// üîÑ STREAMING –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
export async function processLargeFileStreaming(
  file: File,
  onProgress: (progress: number) => void,
  onBatch: (profiles: STRProfile[]) => void,
  batchSize: number = 1000
): Promise<number> {
  try {
    console.log(`üîÑ –ù–∞—á–∞–ª–æ streaming –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ ${file.name}`);
    
    const text = await file.text();
    const processedKits = new Set<string>();
    let totalProfiles = 0;
    let currentBatch: STRProfile[] = [];

    return new Promise((resolve, reject) => {
      Papa.parse(text, {
        header: true,
        skipEmptyLines: true,
        chunk: (results: Papa.ParseResult<CSVRow>) => {
          if (!results.data || !Array.isArray(results.data)) {
            return;
          }

          results.data.forEach((row: any) => {
            const kitNumber = row['Kit Number'];
            if (!kitNumber || processedKits.has(kitNumber)) {
              return;
            }

            processedKits.add(kitNumber);
            
            const profile: STRProfile = {
              kitNumber,
              name: row['Name'] || '',
              country: row['Country'] || '',
              haplogroup: row['Haplogroup'] || '',
              markers: {}
            };

            // –ö–æ–ø–∏—Ä—É–µ–º –º–∞—Ä–∫–µ—Ä—ã
            Object.entries(row).forEach(([key, value]) => {
              if (key !== 'Kit Number' && 
                  key !== 'Name' && 
                  key !== 'Country' && 
                  key !== 'Haplogroup' && 
                  value) {
                profile.markers[key] = String(value).trim();
              }
            });

            if (Object.keys(profile.markers).length > 0) {
              currentBatch.push(profile);
              totalProfiles++;

              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞—Ç—á –∫–æ–≥–¥–∞ –æ–Ω –∑–∞–ø–æ–ª–Ω–µ–Ω
              if (currentBatch.length >= batchSize) {
                onBatch([...currentBatch]);
                currentBatch = [];
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                const estimatedTotal = Math.max(totalProfiles * 2, 1000);
                const progress = Math.min((totalProfiles / estimatedTotal) * 100, 95);
                onProgress(progress);
              }
            }
          });
        },
        complete: () => {
          try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–∞—Ç—á
            if (currentBatch.length > 0) {
              onBatch([...currentBatch]);
            }
            
            console.log(`‚úÖ Streaming –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${totalProfiles} –ø—Ä–æ—Ñ–∏–ª–µ–π`);
            onProgress(100);
            resolve(totalProfiles);
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ streaming:', error);
            reject(error);
          }
        },
        error: (error: Error) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ streaming –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
          reject(error);
        }
      });
    });

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ streaming –æ–±—Ä–∞–±–æ—Ç–∫–µ:', error);
    throw error;
  }
}