name: DNA Utils Universal CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install root dependencies
      run: npm ci
    
    - name: Install str-matcher dependencies
      run: |
        cd str-matcher
        npm ci
        cd ..
    
    - name: Install ftdna_haplo/server dependencies
      run: |
        cd ftdna_haplo/server
        npm ci
        cd ../..
    
    - name: Install ftdna_haplo/client dependencies  
      run: |
        cd ftdna_haplo/client
        npm ci
        cd ../..
    
    - name: Lint str-matcher
      run: |
        cd str-matcher
        npm run lint || echo "Linting completed with warnings"
        cd ..
      
    - name: Build str-matcher
      run: |
        cd str-matcher
        npm run build
        cd ..
    
    - name: Build ftdna_haplo client
      run: |
        cd ftdna_haplo/client
        npm run build
        cd ../..

  python-components:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f ystr_predictor/requirements.txt ]; then
          pip install -r ystr_predictor/requirements.txt
        fi
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt  
        fi
    
    - name: Lint Python code
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 ystr_predictor --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 ystr_predictor --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics || true

  security-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Run npm audit
      run: |
        npm audit --audit-level=high --production || echo "Security audit completed with warnings"
        cd str-matcher && npm audit --audit-level=high --production || echo "str-matcher security audit completed"
        cd ../ftdna_haplo/server && npm audit --audit-level=high --production || echo "server security audit completed"  
        cd ../client && npm audit --audit-level=high --production || echo "client security audit completed"

  docker-build:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build test Docker image
      run: |
        echo "# Test Dockerfile for CI" > Dockerfile.test
        echo "FROM node:18-alpine" >> Dockerfile.test
        echo "WORKDIR /app" >> Dockerfile.test  
        echo "COPY package*.json ./" >> Dockerfile.test
        echo "RUN npm ci --only=production" >> Dockerfile.test
        echo "COPY . ." >> Dockerfile.test
        echo "EXPOSE 9003" >> Dockerfile.test
        echo "CMD [\"npm\", \"start\"]" >> Dockerfile.test
        
        docker build -f Dockerfile.test -t dna-utils-test:latest .
